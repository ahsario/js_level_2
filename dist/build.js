(()=>{const t="http://localhost:3003/";Vue.component("goods-item",{template:'\n    <div :data-id="id" class="goods-item">\n      <h3>{{ title }}</h3>\n      <div class="good-item-img"></div>\n      <p>{{ price }}</p>\n      <button @click="addToCart">Купить</button>\n    </div>',props:["title","price","id"],methods:{addToCart(){this.$emit("addToCart",this.id)}}}),Vue.component("goods-list",{template:'\n    <div class="goods-list">\n      <goods-item\n        v-for="good in goods"\n        :title="good.title"\n        :price="good.price"\n        :id="good.id"\n        @addToCart="addToCartHandler"\n      />\n    </div>\n  ',props:{goods:[]},methods:{addToCartHandler(t){this.$emit("addToCart",t)}}}),Vue.component("cart-item",{template:'\n    <tr data-id="id">\n      <td>{{ title }}</td>\n      <td>{{ price }}</td>\n      <td>{{ quantity }}</td>\n      <td>{{ totalPrice }}</td>\n      <td class="actionButtonsHolder">\n        <button @click="increaseHandler">+</button>\n        <button @click="decreaseHandler">-</button>\n        <button @click="removeHandler">X</button>\n      </td>\n    </tr>',props:["title","price","id","quantity"],computed:{totalPrice(){return this.price*this.quantity}},methods:{increaseHandler(){this.$emit("increaseQuantity",this.id)},decreaseHandler(){this.$emit("decreaseQuantity",this.id)},removeHandler(){this.$emit("remove",this.id)}}}),Vue.component("cart",{template:'\n    <div class="bascket-list">\n      <button @click="openCartHandler" type="button">Корзина ({{totalCount}}|{{totalPrice}}р)</button>\n      <div class="cartPopup" v-if="isVisibleCart">\n        <div class="emptyCartDisclaimer" v-if="!cartItems.length">Корзина пуста</div>\n        <table v-if="cartItems.length" class="cartItemsTable">\n          <tr class="cartTableHeader">\n            <td>Название</td>\n            <td>Количество</td>\n            <td>Цена</td>\n            <td>Сумма</td>\n            <td></td>\n          </tr>\n          <cart-item\n            v-for="good in cartItems"\n            :title="good.title"\n            :price="good.price"\n            :id="good.id"\n            :quantity="good.quantity"\n            @remove="removeHandler"\n            @decreaseQuantity="decreaseHandler"\n            @increaseQuantity="increaseHandler"\n          />\n        </table>\n      </div>\n    </div>',props:{cartItems:[]},data:()=>({isVisibleCart:!1}),computed:{totalCount(){return this.cartItems.reduce(((t,{quantity:e})=>t+e),0)},totalPrice(){return this.cartItems.reduce(((t,{price:e,quantity:i})=>t+e*i),0)}},methods:{openCartHandler(){this.isVisibleCart=!this.isVisibleCart},increaseHandler(t){this.$emit("increaseQuantity",t)},decreaseHandler(t){this.$emit("decreaseQuantity",t)},removeHandler(t){this.$emit("remove",t)}}}),Vue.component("search",{template:'<input id="search" @input="searchHandler" placeholder="Поиск..." />',methods:{searchHandler(t){this.$emit("valueChange",t)}}}),Vue.component("loader",{template:'\n    <div>\n      <div v-if="isLoading">Загрузка</div>\n      <div v-if="!isLoading && !isSuccessFetch">Упс, что-то не так. Уже чиним</div>\n    </div>\n',props:{isLoading:!1,isSuccessFetch:!1}}),new Vue({el:"#app",template:'\n    <div>\n      <header class="header">\n          <search @valueChange="searchHandler" />\n          <cart\n            :cartItems="cart" \n            @remove="removeFromCartHandler"\n            @increaseQuantity="increaseQuantityInCartHandler"\n            @decreaseQuantity="decreaseQuantityInCartHandler"\n          />\n      </header>\n      <main>\n        <loader :isLoading=\'isLoading\' :isSuccessFetch=\'isSuccessFetch\'/>\n        <goods-list v-if="isSuccessFetch" :goods="filtredGoods" @addToCart="addToCartHandler"/>\n      </main>\n    </div>\n  ',data:{cart:[],goods:[],filtredGoods:[],search:"",isLoading:!0,isSuccessFetch:!1},methods:{updateCart(){fetch(`${t}cart`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.cart)}).then((t=>t.json())).then((t=>{this.cart=t}))},addToCartHandler(t){const e=this.cart.find((e=>e.id==t));if(e)e.quantity++;else{const e=this.goods.find((e=>e.id==t));this.cart.push({...e,quantity:1})}this.updateCart()},increaseQuantityInCartHandler(t){const e=this.cart.find((e=>e.id==t));e&&e.quantity++,this.updateCart()},decreaseQuantityInCartHandler(t){const e=this.cart.find((e=>e.id==t));e&&e.quantity>=1&&e.quantity--,e&&e.quantity<=0&&this.removeFromCartHandler(t),this.updateCart()},removeFromCartHandler(t){const e=this.cart.findIndex((e=>e.id==t));this.cart.splice(e,1),this.updateCart()},searchHandler(t){const{target:{value:e}}=t;""===e&&(this.filtredGoods=this.goods);const i=new RegExp(e,"gi");this.filtredGoods=this.goods.filter((t=>i.test(t.title)))},fetchPromise(){return fetch(`${t}data`).then((t=>(this.isLoading=!1,this.isSuccessFetch=!0,t.json()))).catch((t=>{this.isLoading=!1,this.isSuccessFetch=!1,console.error("что-то пошло не так")}))}},mounted(){this.fetchPromise().then((t=>{this.goods=t,this.filtredGoods=t})).catch((t=>{console.log(t)})),fetch(`${t}cart`).then((t=>t.json())).then((t=>{this.cart=t})).catch((t=>{console.log(t)}))}})})();